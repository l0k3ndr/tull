#!/usr/bin/env python3

# Author: l0k3ndr
# Email: lokendra.sharma.one[at]gmail.com

import argparse
import os
import requests
import signal
import subprocess
import sys
import time

from datetime import datetime
from flask import Flask, jsonify
from os.path import expanduser
from uuid import uuid4

HOST = "127.0.0.1"
PORT = 17171


# API is Json, WEB is HTML, RAW is raw data
TULL_API_URL = "http://{}:{}/tull/api".format(HOST, int(PORT))
TULL_WEB_URL = "http://{}:{}/tull/web".format(HOST, int(PORT))
TULL_RAW_URL = "http://{}:{}/tull/raw".format(HOST, int(PORT))

# We make a .tull directory in case it doesn't exist TODO add configurability for this
USER_HOME = expanduser("~")
TULL_DATA_DIR = USER_HOME + "/.tull/data/"
TULL_META_DIR = USER_HOME + "/.tull/meta/"

# <UI_RELATED_MINIMAL_CODING>
PAGE_REFRESH_JS = '<script>window.setInterval("refresh()", 10000); function refresh() {window .location.reload();}</script>'
html = lambda x: "<html>" + x + "</html>"
body = lambda x: "<body>" + x + "</body>"
head = lambda x: "<head>" + x + "</head>"
# </UI_RELATED_MINIMAL_CODING>


# client can halt the server via a api call
def halt_tull_server():
    try:
        requests.get("http://{}:{}/server/halt".format(HOST, PORT))
    except:
        pass
    sys.exit(0)


# hit the web interface to check if tull server is up
def check_tull_server_status():
    try:
        requests.get("http://{}:{}/tull/web".format(HOST, PORT))
        return True
    except:
        pass
    return False


# the interface is a simple flask app
def start_tull_server_flask_app():

    # disable flask banner
    cli = sys.modules["flask.cli"]
    cli.show_server_banner = lambda *x: None

    # create flask app with apis
    app = Flask(__name__)

    @app.route("/tull/raw/")
    def get_list_raw_():
        return get_list_api()

    @app.route("/tull/raw")
    def get_list_raw():
        return "\n".join(
            x
            for x in sorted(
                os.listdir(TULL_DATA_DIR),
                key=lambda x: os.path.getatime(TULL_DATA_DIR + x),
                reverse=True,
            )
        )

    @app.route("/tull/raw/<tull_id>")
    def get_logs_raw(tull_id):

        try:
            if tull_id in os.listdir(TULL_DATA_DIR):
                with open(TULL_DATA_DIR + tull_id) as f:
                    return f.read()
        except:
            return ""

    @app.route("/tull/api/")
    def get_list_api_():
        return get_list_api()

    @app.route("/tull/api")
    def get_list_api():
        return jsonify(
            {
                "data": [
                    x
                    for x in sorted(
                        os.listdir(TULL_DATA_DIR),
                        key=lambda x: os.path.getatime(TULL_DATA_DIR + x),
                        reverse=True,
                    )
                ]
            }
        )

    @app.route("/tull/api/<tull_id>")
    def get_logs_api(tull_id):

        try:
            if tull_id in os.listdir(TULL_DATA_DIR):
                with open(TULL_DATA_DIR + tull_id) as f:
                    return jsonify({"data": [x for x in f.readlines()]})
        except:
            return jsonify({"data": None})

    @app.route("/tull/web/")
    def get_list_():
        return get_list()

    @app.route("/tull/web")
    def get_list():
        response = ""

        for link in [
            '<a href="/tull/web/' + x + '">' + x + "</a>"
            for x in sorted(
                os.listdir(TULL_DATA_DIR),
                key=lambda x: os.path.getatime(TULL_DATA_DIR + x),
                reverse=True,
            )
        ]:
            response += link + "<br></br>"

        return html(body(response))

    @app.route("/tull/web/<tull_id>")
    def get_logs(tull_id):

        try:
            if tull_id in os.listdir(TULL_DATA_DIR):
                with open(TULL_DATA_DIR + tull_id) as f:
                    return html(
                        head(PAGE_REFRESH_JS)
                        + body("<br>".join([x for x in f.readlines()]))
                    )
        except:
            return html(body("No data found in log stream"))

    @app.route("/server/halt")
    def halt_server():
        os.kill(os.getpid(), signal.SIGKILL)

    app.run(host=HOST, load_dotenv=False, debug=False, use_reloader=False, port=PORT)
    sys.exit(0)


# start tull server if it's not already started
def ensure_tull_server():
    try:
        requests.get(TULL_API_URL)
    except:
        f = open(TULL_META_DIR + "tull-server.log", "a+")
        try:
            subprocess.Popen(
                [os.path.realpath(__file__), "--start"],
                close_fds=True,
                stdout=f,
                stderr=f,
            )
        except:
            print("Failed to start server. Exiting.")
            sys.exit(1)

        # it takes some time for process to start server
        # but assumption that it's gonna be 1 sec is bad
        # Need to wait for the server being up and then
        # proceed
        time.sleep(1)

        # # this was to detect if we are being run via term
        # # or a pipe
        # if os.isatty(0):
        #    print(
        #        "Server was not running, so started it. STDIN would go into the tull."
        #    )


# create data directory in case it's not already there
def ensure_tull_data_dir():
    try:
        if not os.path.isdir(TULL_DATA_DIR):
            os.makedirs(TULL_DATA_DIR)
        if not os.path.isdir(TULL_META_DIR):
            os.makedirs(TULL_META_DIR)
    except:
        raise Exception("Directory creation failed.")


# read lines, copy them to file, output them to stdout as well
def main_loop(sid):
    line_cnt = 0
    try:
        with open(TULL_DATA_DIR + sid, "a+") as f:
            for line in sys.stdin:
                f.write(line)
                f.flush()
                sys.stdout.write(line)
                line_cnt += 1
    except:
        pass

    finally:
        if line_cnt == 0:
            os.remove(TULL_DATA_DIR + sid)


def setup_this_tull():
    sid = str(uuid4())

    # ensure file creation
    with open(TULL_DATA_DIR + sid, "w"):
        pass

    # # open browser window to current tull stream
    # try:
    #     os.system("open " + TULL_API_URL + sid)
    # except:
    #     pass

    main_loop(sid)


if __name__ == "__main__":

    parser = argparse.ArgumentParser()

    parser.add_argument("--web", action="store_true")
    parser.add_argument("--start", action="store_true")
    parser.add_argument("--stop", action="store_true")
    parser.add_argument("--status", action="store_true")
    parser.add_argument("--ls", action="store_true")
    parser.add_argument("--follow", type=str)

    parser.add_argument(
        "--host", help="default is localhost", type=str, default="localhost"
    )

    parser.add_argument("--port", help="default is 17171", type=int, default=17171)

    args = parser.parse_args()

    if args.ls:
        print(
            "\n".join(
                (
                    str(datetime.fromtimestamp(os.path.getatime(TULL_DATA_DIR + x)))
                    + "\t"
                    + x
                )
                for x in sorted(
                    os.listdir(TULL_DATA_DIR),
                    key=lambda x: os.path.getatime(TULL_DATA_DIR + x),
                    reverse=True,
                )
            )
        )
        sys.exit(0)

    if args.follow:
        sid = args.follow.strip()
        # currently using tail command, but how to handle if it
        # does not exist?
        f = subprocess.Popen(
            ["tail", "-F", TULL_DATA_DIR + sid],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
        while True:
            line = f.stdout.readline()
            print(line)
        sys.exit(0)

    if args.host:
        HOST = args.host

    if args.port:
        PORT = args.port

    if args.status:
        print(check_tull_server_status())
        sys.exit(0)

    if args.stop:
        halt_tull_server()
        sys.exit(0)

    if args.start:
        start_tull_server_flask_app()
        sys.exit(0)

    if args.web:
        print("TULL_API_URL", TULL_API_URL)
        print("TULL_WEB_URL", TULL_WEB_URL)
        print("TILL_RAW_URL", TULL_RAW_URL)

    ensure_tull_server()
    ensure_tull_data_dir()

    setup_this_tull()
